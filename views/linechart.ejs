<div id="bbox" class="absolute-transform-center" style="width:85%; height:70%;">
  <svg id="timeline" width="100%" height="100%"></svg>
</div>
<style>
  /* set the CSS */

  path {
    fill: none;
    stroke: #ffbf0f;
    stroke-width: 2px;
  }

  .dot {
    fill-opacity: 0;
    stroke-opacity: 0;
    stroke: #111;
    fill: #fff1cc;
    stroke-width: 3px;
    transition: fill-opacity 2s ease, stroke-opacity 2s ease;
  }

  .tooltip {
    position: absolute;
    text-align: center;
    padding: 5px 25px 5px 25px;
    margin: 3px;
    font-size: 1.5vmin;
    background: #fffbfd;
    border: 0;
    border-radius: 8px;
    max-width: 200px;
    opacity: 0.9;
    transition: transform 1s ease-out, opacity 1s ease;
  }

  .tooltip.inactive {
    transform: scale(0, 0);
    opacity: 0;
  }

  .tooltip p {
    margin: 0;
    padding: 0;
    font-weight: 600;
  }

  .line {
    transition: stroke-dashoffset 2s linear;
  }

  #he {
    font-size: 17px;
    padding-bottom: 2px;
  }
</style>

<!-- load the d3.js library -->
<script src="https://d3js.org/d3.v4.min.js"></script>
<script>
!function() {

var dotRadius = 5;
var timeline = document.getElementById("timeline");

function makeLine(x, y) {
  return d3.line()
    .x(function (d) {
      return x(d.epoch);
    })
    .y(function (d) {
      return y(d.GNI);
    });
}

d3.csv("/timeline.csv", function(err, data) {
  if (err) {
    throw err;
  }
  function createScales(width, height) {
    var x = d3.scaleLinear().range([dotRadius + 2, width - dotRadius - 2]);
    var y = d3.scaleLinear().range([height - dotRadius - 2, dotRadius + 2]);
    x.domain(d3.extent(data, function (d) {
      return d.epoch;
    }));
    y.domain(d3.extent(data, function (d) {
      return d.GNI;
    }));
    return [x, y];
  }

  function draw() {
    drew = true;
    var width = timeline.clientWidth;
    var height = timeline.clientHeight;
    // set the ranges
    var scales = createScales(width, height);
    var x = scales[0], y = scales[1];

    var svg = d3.select(timeline);
    var totalLength;
    var path = svg.append("path")
      .data([data])
      .attr("d", makeLine(x, y))
      .attr("stroke-dasharray", function(){ return totalLength = this.getTotalLength(); })
      .style("stroke-dashoffset", totalLength);

    // add the dots with tooltips
    var fixeddot = svg.selectAll()
      .data(data)
      .enter().append("circle")
      .attr("r", dotRadius)
      .attr("class", "dot");

    var bbox = d3.select(document.getElementById("bbox"));
    fixeddot
      .attr("cx", function (d) {
        return x(d.epoch);
      })
      .attr("cy", function (d) {
        return y(d.GNI);
      })
      .select(function (d) {
        var self = this;
        var dot = d3.select(self);
        dot.style("stroke","#ff7a09");
        var tooltip = bbox
          .append("div")
          .attr("class", "tooltip")
          .style("opacity", 0);
        tooltip.html("<p id=\"he\">" + d.term + "</p><p>" + d.info + "</p>");

        // position:
        // 0 | 2
        // --o--
        // 1 | 3
        // where `o` is the circle on the timeline
        var position = parseInt(d.position);
        var cy = parseFloat(self.getAttribute("cy"));
        var cx = parseFloat(self.getAttribute("cx"));
        var transformOrigin = "";
        if (position % 2 === 0) {
          transformOrigin += "bottom";
          tooltip.style("bottom", (1 - cy / height) * 100 + "%");
        } else {
          transformOrigin += "top";
          tooltip.style("top", cy / height * 100 + "%");
        }
        transformOrigin += " ";
        // ~~ is a faster Math.floor() (two bitwise nots converts it to integer)
        if (~~(position / 2) === 0) {
          transformOrigin += "right";
          tooltip.style("right", (1 - cx / width) * 100 + "%");
        } else {
          transformOrigin += "left";
          tooltip.style("left", cx / width * 100 + "%");
        }
        tooltip.style("transform-origin", transformOrigin);
        setTimeout(function() {
          dot.style("fill-opacity", 1).style("stroke-opacity", 1);
          tooltip.style("opacity", .9);
        }, 2000 * cx / width);
      });

    setTimeout(function() {
      path.attr("class", "line").style("stroke-dashoffset", 0);
    }, 0);

  }
  function redraw() {
    var width = timeline.clientWidth;
    var height = timeline.clientHeight;
    // set the ranges
    var scales = createScales(width, height);
    var x = scales[0], y = scales[1];
    // define the line
    var valueline = d3.line()
      .x(function (d) {
        return x(d.epoch);
      })
      .y(function (d) {
        return y(d.GNI);
      });
    var svg = d3.select(timeline);
    svg.select("path")
      .attr("d", valueline)
      .attr("stroke-dasharray", function(){ return this.getTotalLength(); });
    svg.selectAll(".dot")
      .attr("cx", function (d) {
        return x(d.epoch);
      })
      .attr("cy", function (d) {
        return y(d.GNI);
      });
  }
  var drew = false;
  var animateHook = function () {
    var boundingRect = timeline.getBoundingClientRect();
    if (boundingRect.top >= 0 && boundingRect.bottom <= document.documentElement.clientHeight) {
      window.removeEventListener("scroll", animateHook);
      if (!drew) {
        draw();
      }
    }
  };
  animateHook();
  window.addEventListener("scroll", animateHook, false);
  window.addEventListener("resize", function() {
    if (drew) {
      redraw();
    }
  }, false);
});

}();
</script>
